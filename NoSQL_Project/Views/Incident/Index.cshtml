@using NoSQL_Project.Models.Enums
@model PaginatedList<NoSQL_Project.Models.Incident>

@{
    ViewData["Title"] = "Incidents";
}
@if (TempData["Success"] != null)
{
    <p class="alert-success">@TempData["Success"]</p>
}
@if (TempData["Error"] != null)
{
    <p class="alert-danger">@TempData["Error"]</p>
}


<header class="main_container_header">
    <div>
        <h3>Incidents</h3>
    </div>

</header>

<div class="charts_container">
    <div id="chart_left_container" class="canvas_container">
        <h4>Unresolved Incidents</h4>
        <p>All tickets curently Open</p>
        <canvas id="chart1" width="150" height="150"></canvas>
    </div>
    <div id="chart_right_container" class="canvas_container">
        <h4>Incidents past deadline</h4>
        <p>Tickets needing immediate attention</p>
        <canvas id="chart2" width="150" height="150"></canvas>
    </div>
</div>





<div class="search_and_fileter_container">

    <div class="search_sub_container">
        <form class="d-flex" role="search">
            <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search">
            <button class="btn btn-outline-success" type="submit">Search</button>
        </form>
        <button class="filter_button_class" id="filter_button"><img src="/assets/FiltersIcon.svg" alt="Alternate Text" /> Filters</button>
    </div>

    <div class="search_container">
        <div class="search_options_container">
            <nav>
                <ul class="search_options_ul">
                    <li class="search_options_li">
                        <a class="search_options_a @(ViewContext.HttpContext.Request.Query["statusFilter"] == "All" ? "activeFilter" : "")"
                        asp-action="Index" asp-route-statusFilter="All" asp-route-typeFilter="@Context.Request.Query["typeFilter"]">All</a>
                    </li>
                    <li class="search_options_li">
                        <a class="search_options_a @(ViewContext.HttpContext.Request.Query["statusFilter"] == "open" ? "activeFilter" : "")" 
                        asp-action="Index" asp-route-statusFilter="open" asp-route-typeFilter="@Context.Request.Query["typeFilter"]">Open</a>
                    </li>
                    <li class="search_options_li">
                        <a class="search_options_a @(ViewContext.HttpContext.Request.Query["statusFilter"] == "inProgress" ? "activeFilter" : "")"
                        asp-action="Index" asp-route-statusFilter="inProgress" asp-route-typeFilter="@Context.Request.Query["typeFilter"]">In Progress</a>
                    </li>
                    <li class="search_options_li">
                        <a class="search_options_a @(ViewContext.HttpContext.Request.Query["statusFilter"] == "resolved" ? "activeFilter" : "")"
                        asp-action="Index" asp-route-statusFilter="resolved" asp-route-typeFilter="@Context.Request.Query["typeFilter"]">Resolved</a>
                    </li>
                    <li class="search_options_li">
                        <a class="search_options_a @(ViewContext.HttpContext.Request.Query["statusFilter"] == "closed_without_resolve" ? "activeFilter" : "")"
                        asp-action="Index" asp-route-statusFilter="closed_without_resolve" asp-route-typeFilter="@Context.Request.Query["typeFilter"]">Closed W/O Resolve</a>
                    </li>
                    <li class="search_options_li">
                        <a class="search_options_a @(ViewContext.HttpContext.Request.Query["statusFilter"] == "closed" ? "activeFilter" : "")"
                        asp-action="Index" asp-route-statusFilter="closed" asp-route-typeFilter="@Context.Request.Query["typeFilter"]">Closed</a>
                    </li>
                </ul>
            </nav>
        </div>
    </div>

    <a class="btn btn-primary" href="/Incident/CreateIncident">Create New Incident</a>

</div>
@if (!string.IsNullOrEmpty(ViewContext.HttpContext.Request.Query["statusFilter"]) ||
   !string.IsNullOrEmpty(ViewContext.HttpContext.Request.Query["typeFilter"]))
{
    <div class="alert alert-info mt-3">
        <strong>Filters applied:</strong>
        @ViewContext.HttpContext.Request.Query["statusFilter"]
        @ViewContext.HttpContext.Request.Query["typeFilter"]
        @ViewContext.HttpContext.Request.Query["branch"]
    </div>
}
<div class="popupOverlay" >
    <div class="popupContainer">
        <div>
            <form method="get" asp-action="Index" class="d-flex gap-3 align-items-center">
                <input type="hidden" name="statusFilter" value="@Context.Request.Query["statusFilter"]" />
                <select name="typeFilter" class="form-select border-dark border-1" style="width: 200px;">
                    <option value="">Filter by Type --</option>
                    <option value="hardware">Hardware</option>
                    <option value="software">Software</option>
                    <option value="network">Network</option>
                    <option value="security">Security</option>
                    <option value="access">Access</option>
                    <option value="other">Other</option>
                </select>
                <select name="branch">
                    <option value="">Select a Branch</option>
                    @{
                        if (ViewBag.Branches != null)
                        {
                            List<Location> locations = ViewBag.Branches;

                            foreach (var location in locations)
                            {
                                <option value="@location.Branch">@location.Branch</option>
                            }
                        }
                    }
                </select>

                <button type="submit" class="btn btn-info border-dark border-2">Apply Filters</button>
            </form>
        </div>
    </div>
</div>
<div class="table_NICE_container">
    <table class="table_NICE">
        <thead>
            <tr>
                <th>Priority</th>
                <th>Title</th>
                <th>Type</th>
                <th>Status</th>
                <th>Assigned to</th>
                <th>Branch</th>
                <th>Reported At</th>
                <th>SLA</th>
            </tr>
        </thead>
        <tbody class="table_NICE_body">
            @foreach (Incident incident in Model.Items)
            {
                string incidentStatusStyle = "";
                string priorityLevelStyle = "";
                // Determine priority style
                switch (incident.Priority)
                {
                    case Priority.low:
                        priorityLevelStyle = "priority_low";
                        break;
                    case Priority.medium:
                        priorityLevelStyle = "priority_medium";
                        break;
                    case Priority.high:
                        priorityLevelStyle = "priority_high";
                        break;
                    case Priority.critical:
                        priorityLevelStyle = "priority_critical";
                        break;
                }
                // Determine status style
                switch (incident.Status)
                {
                    case IncidentStatus.open:
                        incidentStatusStyle = "status_open";
                        break;
                    case IncidentStatus.resolved:
                        incidentStatusStyle = "status_resolved";
                        break;
                    case IncidentStatus.closed_without_resolve:
                        incidentStatusStyle = "status_closed_without_resolve";
                        break;
                    case IncidentStatus.inProgress:
                        incidentStatusStyle = "status_in_progress";
                        break;
                    case IncidentStatus.closed:
                        incidentStatusStyle = "status_closed";
                        break;
                }
                
            <tr>
                
                <td>
                    <div class="priority_label @priorityLevelStyle">@incident.Priority</div>
                </td>
                    <td>
                        <a class="incident_href" asp-controller="Incident" asp-action="IncidentDetails" asp-route-id="@incident.Id">
                            @incident.Subject
                        </a>
                    </td>
                    <td>
                        @incident.IncidentType
                    </td>
                <td>
                    <div class="priority_label @incidentStatusStyle">@incident.Status</div>
                </td>
                @{
                    var activeUser = incident.AssignedTo?.FirstOrDefault(a => a.IsActive);
                }
                <td>@(activeUser != null ? $"{activeUser.FirstName} {activeUser.LastName}" : "Unassigned")</td>
                <td>@incident.Location.Branch</td>
                <td>@incident.ReportedAt.ToString("g")</td>
                <td>@incident.Deadline.ToString("g")</td>
            
            </tr>
                
            }
        </tbody>
    </table>
</div>
<div class="row">
    <div class="col-md-6">
    </div>
    <div class="col-md-6">
        <nav>
            <ul class="pagination justify-content-center">
                <li class="page-item @(Model.PageIndex == 1 ? "disabled" : "")">
                    <a class="page-link text-black" asp-route-pageNumber="1"
                       asp-route-statusFilter="@ViewData["CurrentStatus"]"
                       asp-route-typeFilter="@ViewData["TypeFilter"]">
                        <span>First</span>
                    </a>
                </li>

                <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
                    <a class="page-link text-black" asp-route-pageNumber="@(Model.PageIndex - 1)"
                       asp-route-statusFilter="@ViewData["CurrentStatus"]"
                       asp-route-typeFilter="@ViewData["TypeFilter"]">
                        <span>Previous</span>
                    </a>
                </li>

                @for (int i = 1; i <= Model.TotalPages; i++)
                {
                <li class="page-item @(Model.PageIndex == i ? "active" : "")">
                    <a class="page-link text-black" asp-route-pageNumber="@i"
                       asp-route-statusFilter="@ViewData["CurrentStatus"]"
                       asp-route-typeFilter="@ViewData["TypeFilter"]">@i</a>
                </li>
                }

                <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
                    <a class="page-link text-black" asp-route-pageNumber="@(Model.PageIndex + 1)"
                       asp-route-statusFilter="@ViewData["CurrentStatus"]"
                       asp-route-typeFilter="@ViewData["TypeFilter"]">
                        <span>Next</span>
                    </a>
                </li>
                <li class="page-item @(Model.PageIndex == Model.TotalPages ? "disabled" : "")">
                    <a class="page-link text-black" asp-route-pageNumber="@Model.TotalPages"
                       asp-route-statusFilter="@ViewData["CurrentStatus"]"
                       asp-route-typeFilter="@ViewData["TypeFilter"]">
                        <span>Last</span>
                    </a>
                </li>


            </ul>
        </nav>
    </div>
</div>
@section Scripts{
<script>
    function drawDonut(canvasId, value, total, color){
        const canvas = document.getElementById(canvasId);
        const context = canvas.getContext("2d");
        const percent = value / total;

        context.lineWidth = 25;
        context.strokeStyle = "lightgrey";
        context.beginPath();
        context.arc(75, 75, 55, 0, 2 * Math.PI);
        context.stroke();

        context.strokeStyle = color;
        context.beginPath();
        context.arc(75, 75, 55, -0.5 * Math.PI, (percent * 2 * Math.PI) - 0.5 * Math.PI);
        context.stroke();

        //Text
        context.fillStyle = "#000";
        context.font = "20px Arial";
        context.textAlign = "center";
        context.textBaseLine = "middle";
        context.fillText(value + (total ? "/" + total : ""), 75, 75);
    }
        drawDonut("chart1", @ViewData["NumberOfOpenIncidents"], @ViewData["NumberOfNonClosedIncidents"], "orange");
        drawDonut("chart2", 14, 75, "orange");


                var filter_button = document.getElementById("filter_button");
        filter_button.addEventListener('click', function(){
            var overlays = document.getElementsByClassName('popupOverlay');
            for (var i = 0; i < overlays.length; i++) {
                overlays[i].style.display = "block";
                overlays[i].addEventListener('click', function (e) {
                    if (e.target === this) {
                        this.style.display = 'none';
                    }
                });
            }
        });
            
        
</script>
}
